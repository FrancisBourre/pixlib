/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.data.libs.GraphicLib;import com.bourre.data.libs.GraphicLibEvent;import com.bourre.data.libs.GraphicLibLocator;import com.bourre.data.libs.GraphicLibLocatorEvent;import com.bourre.data.libs.IGraphicLibLocatorListener;import com.bourre.data.libs.ILibListener;import com.bourre.data.libs.LibEvent;import com.bourre.data.libs.LibStack;import com.bourre.data.libs.OrphanGraphicLib;import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.ioc.assembler.movieclip.EmptyMovieClip;import com.bourre.ioc.assembler.movieclip.IMovieClipExpertListener;import com.bourre.ioc.assembler.movieclip.MovieClipEvent;import com.bourre.ioc.bean.BeanFactory;import com.bourre.ioc.context.ContextGraphicLib;import com.bourre.log.PixlibStringifier;import com.bourre.log.PixlibDebug;class com.bourre.ioc.assembler.movieclip.MovieClipExpert 	extends EmptyMovieClip 	implements IGraphicLibLocatorListener, ILibListener{	public static var onLoadInitEVENT : EventType = LibStack.onLoadInitEVENT;	public static var onLoadProgressEVENT : EventType = LibStack.onLoadProgressEVENT;	public static var onTimeOutEVENT : EventType = LibStack.onTimeOutEVENT;	public static var onLoadCompleteEvent : EventType = LibStack.onLoadCompleteEVENT;	private static var _oI : MovieClipExpert;	private var _oEB : EventBroadcaster;	private var _dllLibstack : LibStack;	private var _gfxLibstack : LibStack;	private var _mEmptyMovieClip : Map;	/**	 * @return singleton instance of MovieClipExpert	 */	public static function getInstance() : MovieClipExpert	{		if (!_oI) _oI = new MovieClipExpert();		return _oI;	}	private function MovieClipExpert()	{		_oEB = new EventBroadcaster( this );		_dllLibstack = new LibStack();		_gfxLibstack = new LibStack();		_mEmptyMovieClip = new Map();	}	public function buildDLL( url : String ) : Void	{		_dllLibstack.enqueue( new GraphicLib( _level0, _dllLibstack.getLength(), false ), "DLL", url );	}	public function buildGraphicLib( parentID : String, depth : Number, isVisible : Boolean, name : String, url : String ) : Void	{		_gfxLibstack.enqueue( new ContextGraphicLib( parentID, depth, isVisible ), name, url );	}	public function buildEmptyMovieClip( ID : String, parentID : String, depth : Number ) : Void	{		if ( !(_mEmptyMovieClip.get( parentID ) instanceof Array) ) _mEmptyMovieClip.put( parentID, new Array() );		_mEmptyMovieClip.get( parentID ).push( new EmptyMovieClip( ID, parentID, depth) );	}	public function checkForEmptyMovieClip( parentID : String ) : Void	{		// register empty movieclips to BeanFactory		if ( _mEmptyMovieClip.containsKey( parentID ) )		{			var a : Array = _mEmptyMovieClip.get( parentID );			var l : Number = a.length;			for ( var i : Number = 0; i < l; i++ )			{				var info : EmptyMovieClip = EmptyMovieClip( a[i] );				var id : String = info._sID;				var parent : MovieClip = BeanFactory.getInstance().locate( parentID );				var mc : MovieClip = parent.createEmptyMovieClip( id, info._nDepth );				_oEB.broadcastEvent( new MovieClipEvent( mc ) );				BeanFactory.getInstance().register( id, mc );				checkForEmptyMovieClip( id );			}		} 	}	public function load() : Void	{		_loadDLLList();	}	private function _loadDLLList() : Void	{		if ( _dllLibstack.getLength() > 0 )		{			_dllLibstack.addEventListener( LibStack.onLoadInitEVENT, this, _onDLLLoad );			_dllLibstack.addEventListener( LibStack.onLoadProgressEVENT, this );			_dllLibstack.addEventListener( LibStack.onTimeOutEVENT, this );			_dllLibstack.addEventListener( LibStack.onLoadCompleteEVENT, this, _loadDisplayList );			_dllLibstack.execute();		} else		{			_loadDisplayList();		}	}	private function _onDLLLoad( e : GraphicLibEvent ) : Void	{		_oEB.broadcastEvent( e );		GraphicLibLocator.getInstance().unregister( e.getName() );	}	private function _loadDisplayList() : Void	{		_dllLibstack.removeListener( this );		GraphicLibLocator.getInstance().addListener( this );		if ( _gfxLibstack.getLength() > 0 )		{			_gfxLibstack.addEventListener( LibStack.onLoadInitEVENT, this );			_gfxLibstack.addEventListener( LibStack.onLoadProgressEVENT, this );			_gfxLibstack.addEventListener( LibStack.onTimeOutEVENT, this );			_gfxLibstack.addEventListener( LibStack.onLoadCompleteEVENT, this, _onLoad );			_gfxLibstack.execute();		} else		{			_onLoad( new LibEvent( MovieClipExpert.onLoadCompleteEvent ) );		}	}	private function _onLoad( e : LibEvent ) : Void	{		_gfxLibstack.removeListener( this );		if ( !(GraphicLibLocator.getInstance().isRegistered(OrphanGraphicLib.ROOT_KEY)) )		{			OrphanGraphicLib.setRootTarget();		}		GraphicLibLocator.getInstance().removeListener( this );		GraphicLibLocator.getInstance().getGraphicLib(OrphanGraphicLib.ROOT_KEY).getView()._visible = true;		_oEB.broadcastEvent( e );	}	/**	 * IGraphicLibLocatorListener callbacks.	 */	public function onRegisterGraphicLib( e : GraphicLibLocatorEvent ) : Void	{		var id : String = e.getName();		var mc : MovieClip = e.getGraphicLib().getView();		BeanFactory.getInstance().register( id, mc );		_oEB.broadcastEvent( new MovieClipEvent( mc ) );		checkForEmptyMovieClip( id );	}	public function onUnregisterGraphicLib( e : GraphicLibLocatorEvent ) : Void	{		var key : String = e.getName();		BeanFactory.getInstance().unregister( key, GraphicLibLocator.getInstance().getGraphicLib( key ) );	}	/**	 * ILibListener callbacks.	 */	public function onLoadInit( e : LibEvent ) : Void	{		GraphicLibLocator.getInstance().getGraphicLib(OrphanGraphicLib.ROOT_KEY).getView()._visible = false;		_oEB.broadcastEvent( e );	}	public function onLoadProgress( e : LibEvent ) : Void	{		_oEB.broadcastEvent( e );	}	public function onTimeOut( e : LibEvent ) : Void	{		_oEB.broadcastEvent( e );	}	/**	 * Event system	 */	public function addListener( oL : IMovieClipExpertListener ) : Void	{		_oEB.addListener( oL );	}	public function removeListener( oL : IMovieClipExpertListener ) : Void	{		_oEB.removeListener( oL );	}	public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_oEB.addEventListener.apply( _oEB, arguments );	}	public function removeEventListener( e : EventType, oL ) : Void	{		_oEB.removeEventListener( e, oL );	}	/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String	{		return PixlibStringifier.stringify( this );	}}