/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.ioc.assembler.property.IPropertyExpertListener;import com.bourre.ioc.assembler.property.Property;import com.bourre.ioc.assembler.property.PropertyEvent;import com.bourre.ioc.bean.BeanEvent;import com.bourre.ioc.bean.BeanFactory;import com.bourre.ioc.bean.IBeanFactoryListener;import com.bourre.ioc.build.BuildFactory;import com.bourre.ioc.core.IDExpert;import com.bourre.ioc.parser.ContextAttributeList;import com.bourre.ioc.parser.ContextTypeList;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.assembler.property.PropertyExpert 	extends Property 	implements IBeanFactoryListener{	private static var _oI : PropertyExpert;	private var _oEB : EventBroadcaster;	private var _mProperty : Map;	private var _aProperty : Array;		/**	 * @return singleton instance of PropertyFactory	 */	public static function getInstance() : PropertyExpert 	{		if (!_oI) _oI = new PropertyExpert();		return _oI;	}		private function PropertyExpert()	{		_oEB = new EventBroadcaster( this );		_mProperty = new Map();		_aProperty = new Array();				BeanFactory.getInstance().addListener( this );		addListener( IDExpert.getInstance() );	}		public function deserializeArguments( a : Array ) : Array	{		var r : Array;		var l : Number = a.length;		if ( l > 0 ) r = new Array();		for ( var i : Number = 0; i < l; i++ ) r.push( getValue( a[i] ) );		return r;	}		public function setPropertyValue( p : Property, target ) : Void	{		target[ p._sName ] = getValue( p );	}			public function setAllProperties() : Void	{		var l : Number = _aProperty.length;		for ( var i : Number = 0; i < l; i++ ) 		{			var a : Array = _aProperty[i];			var m : Number = a.length;						for ( var j : Number = 0; j < m; j++ )			{				var p : Property = a[j];				var o = BeanFactory.getInstance().locate( p._sOwnerID );				setPropertyValue( p, o );			}		}	}			public function getValue( p : Property )	{		if ( p._sMethod ) 		{			var a : Array = p._sMethod.split(".");			return BeanFactory.getInstance().locate( a[0] )[ a[1] ];				} else if ( p._sRef )		{			var ref : String = p._sRef;			if ( ref.indexOf(".") == -1 )			{				return BeanFactory.getInstance().locate( p._sRef );							} else			{				var a : Array = ref.split(".");				var oRef = BeanFactory.getInstance().locate( String(a.shift()) );				return eval( oRef + "." + (a.join(".")) );			}					} else		{			var type : String = p._sType;			if (type == undefined ) type = ContextTypeList.STRING;			return BuildFactory.getInstance().getBuilder( type ).build( p._sType, [p._sValue] );		}	}		public function getType( p : Property ) : String	{		return p._sType;	}		public function getPropertyVO( ownerID : String, property ) : Array	{		var a : Array;				if ( property )		{			a = new Array();			var l : Number = property.length;						if ( l > 0 ) 			{				for ( var i : Number = 0; i < l; i++ ) a.push( _buildProperty( ownerID, property[i].attribute) );							} else			{				a.push( _buildProperty( ownerID, property.attribute ) );			}		}				return a;	}		public function buildProperty( ownerID : String, property ) : Void	{		_mProperty.put( ownerID, getPropertyVO( ownerID, property ) );	}		public function buildObjectProperty( ownerID : String, property )	{		_mProperty.put( ownerID, getPropertyVO( ownerID, property ) );	}		private function _buildProperty( ownerID : String, rawProperty : Object ) : Property	{		var p : Property =  new Property( 												ownerID,											ContextAttributeList.getName( rawProperty ),											ContextAttributeList.getValue( rawProperty ),											ContextAttributeList.getType( rawProperty ),											ContextAttributeList.getRef( rawProperty ),											ContextAttributeList.getMethod( rawProperty )										);		_oEB.broadcastEvent( new PropertyEvent( p, p._sOwnerID, p._sRef  ) );		return p;	}		/**	 * Event system	 */	public function addListener( oL : IPropertyExpertListener ) : Void	{		_oEB.addListener( oL );	}		public function removeListener( oL : IPropertyExpertListener ) : Void	{		_oEB.removeListener( oL );	}		public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_oEB.addEventListener.apply( _oEB, arguments );	}		public function removeEventListener( e : EventType, oL ) : Void	{		_oEB.removeEventListener( e, oL );	}		/**	 * IBeanFactoryListener callbacks	 */	public function onRegisterBean( e : BeanEvent ) : Void	{		var id : String = e.getID();		var o = e.getBean();				if ( _mProperty.containsKey( id ) )		{			var props : Array = _mProperty.get( id );			var l : Number = props.length;			while( -- l > - 1 ) setPropertyValue( props[l], o );		}	}		public function onUnegisterBean( e : BeanEvent ) : Void	{			}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}