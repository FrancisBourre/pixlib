/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.ioc.log.PixiocDebug;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.assembler.DepthManager {	private static var _oI : DepthManager;	private var _mDepthID : Map;	private var _mDepthMap : Map;		/**	 * @return singleton instance of DepthManager	 */	public static function getInstance() : DepthManager 	{		if (!_oI) _oI = new DepthManager();		return _oI;	}		private function DepthManager()	{		_mDepthID = new Map();		_mDepthMap = new Map();	}		private function _getDepthMap( parentID : String ) : Object	{		if ( !(_mDepthMap.containsKey( parentID )) ) _mDepthMap.put( parentID, {} );		return _mDepthMap.get( parentID );	}		public function isReservedDepth( parentID : String, depth : Number ) : Boolean	{		var o : Object = _getDepthMap( parentID );		return ( o[ depth ] != undefined );	}		public function reserveDepth( mcID : String, parentID : String, depth : Number ) : Number	{		if ( !(isReservedDepth( parentID, depth )) )		{			var o : Object = _getDepthMap( parentID );			o[ depth ] = depth;			return depth;					} else		{			var d : Number = getNextHighestDepth( parentID );			PixiocDebug.getInstance().warn( this + ".reserveDepth() failed on '" + parentID + "." + mcID + "' target with '" + depth + "' depth value." );			PixiocDebug.getInstance().warn( this + " assigns depth value: " + d + " to '" + parentID + "." + mcID + "' target." );			return d;		}	}		public function getNextHighestDepth( parentID : String ) : Number	{		var d : Number = -1;		var o : Object = _getDepthMap( parentID );				for ( var p : String in o )		{			var n : Number = o[p];			if ( n > d ) d = n;		}				d++;		o[ d ] = d;		return d;	}		public function suscribeDepth( mcID : String, parentID : String, depth : Number ) : Number	{		if ( isNaN( depth ) )		{			depth = getNextHighestDepth( parentID );		} else		{			depth = reserveDepth( mcID, parentID, depth );		}		return _mDepthID.put( mcID, depth );	}			/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}