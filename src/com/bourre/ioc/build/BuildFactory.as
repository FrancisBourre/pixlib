/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.ioc.build.BuildArray;import com.bourre.ioc.build.BuildBoolean;import com.bourre.ioc.build.BuildInstance;import com.bourre.ioc.build.BuildNull;import com.bourre.ioc.build.BuildNumber;import com.bourre.ioc.build.BuildString;import com.bourre.ioc.build.IBuild;import com.bourre.ioc.parser.ContextTypeList;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.build.BuildFactory {	private static var _oI : BuildFactory;		/**	 * @return singleton instance of BuildFactory	 */	public static function getInstance() : BuildFactory 	{		if (!_oI) _oI = new BuildFactory();		return _oI;	}		private var _m : Map;		private function BuildFactory()	{		init();	}		public function init() : Void	{		_m = new Map();				addType( ContextTypeList.DEFAULT, new BuildString() );		addType( ContextTypeList.STRING, new BuildString() );		addType( ContextTypeList.NUMBER, new BuildNumber() );		addType( ContextTypeList.BOOLEAN, new BuildBoolean() );		addType( ContextTypeList.ARRAY, new BuildArray() );		addType( ContextTypeList.INSTANCE, new BuildInstance() );		addType( ContextTypeList.NULL, new BuildNull() );	}		public function addType( type : String, build : IBuild ) : Void	{		_m.put( type, build );	}		public function getBuilder( type : String ) : IBuild	{		if ( _m.containsKey( type ) )		{			return IBuild( _m.get( type ) );					} else		{			return IBuild( _m.get( ContextTypeList.INSTANCE ) );		}	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}