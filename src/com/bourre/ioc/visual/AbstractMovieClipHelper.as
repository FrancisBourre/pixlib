/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.libs.GraphicLib;import com.bourre.data.libs.GraphicLibLocator;import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.events.IEvent;import com.bourre.events.StringEvent;import com.bourre.ioc.log.PixiocDebug;import com.bourre.ioc.plugin.IPlugin;import com.bourre.ioc.visual.MovieClipHelperLocator;import com.bourre.log.PixlibStringifier;import com.bourre.structures.Point;	class com.bourre.ioc.visual.AbstractMovieClipHelper {	public static var onInitEVENT : EventType = new EventType( "onInit" );		public var view : MovieClip;		private var _gl : GraphicLib;	private var _sName:String;	private var _oEB:EventBroadcaster;	private var _owner : IPlugin;		private function AbstractMovieClipHelper( owner : IPlugin, name : String, mc : MovieClip ) 	{		_oEB = new EventBroadcaster( this );				if ( owner ) setOwner( owner );		if( name ) _initMovieClipHelperView( name, mc );	}		public function onInit() : Void	{		notifyChanged( new StringEvent( AbstractMovieClipHelper.onInitEVENT, getName() ) );	}		public function getOwner() : IPlugin	{		return _owner;	}		public function setOwner( owner : IPlugin ) : Void	{		_owner = owner;	}		public function getLogger() : PixiocDebug	{		return PixiocDebug.getInstance( getOwner() );	}		public function notifyChanged( e : IEvent ) : Void	{		_getBroadcaster().broadcastEvent( e );	}		public function registerGraphicLib( glName : String, name : String ) : Void	{		_initMovieClipHelperView( glName, null, (( name && (name != getName()) ) ? name : null) );	}		public function registerMovieClip( mc : MovieClip, name : String ) : Void	{		_initMovieClipHelperView( getName(), mc, (( name && (name != getName()) ) ? name : null) );	}		public function setVisible( b : Boolean ) : Void	{		if ( b )		{			show();		} else		{			hide();		}	}		public function show() : Void	{		if (_gl) 		{			_gl.show();		} else 		{			view._visible = true;		}	}		public function hide() : Void	{		if (_gl) 		{			_gl.hide();		} else 		{			view._visible = false;		}	}		public function move( x : Number, y : Number ) : Void	{		view._x = x;		view._y = y;	}		public function getPosition() : Point	{		return new Point( view._x, view._y );	}		public function setSize( w : Number, h : Number ) : Void	{		view._width = w;		view._height = h;	}		public function getSize() : Point	{		return new Point( view._width, view._height );	}		public function getName() : String	{		return _sName;	}		public function canResolveUI ( label ) : Boolean	{		return ( (eval( view + "." + label )) != undefined );	}		public function resolveUI ( label )	{		var o = eval( view + "." + label );		if ( !o ) getLogger().error( "Can't resolve '" + label + "' UI in " + this + ".view" );		return o;	}		public function release() : Void	{		_getBroadcaster().removeAllListeners();		MovieClipHelperLocator.getInstance( getOwner() ).unregisterMovieClipHelper( getName() );		view.removeMovieClip();		_gl.release();		_sName = null;	}		public function addListener( oL ) : Void	{		_getBroadcaster().addListener(oL);	}		public function removeListener( oL ) : Void	{		_getBroadcaster().removeListener( oL );	}		public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_getBroadcaster().addEventListener.apply( _getBroadcaster(), arguments );	}		public function removeEventListener( e : EventType, oL ) : Void	{		_getBroadcaster().removeEventListener( e, oL );	}		public function isVisible() : Boolean	{		if ( _gl ) 		{			return _gl.isVisible();		} else 		{			return view._visible;		}	}			/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}		//	private function _initMovieClipHelperView( glName : String, mc : MovieClip, mvhName : String ) : Void	{		if (mc)		{			this.view = mc;					} else		{			_gl = GraphicLibLocator.getInstance().getGraphicLib( glName );			if ( _gl )			{				this.view = _gl.getView();			} else			{				getLogger().error( "Invalid arguments for " + this + " constructor." );				return;			}		}				setName( mvhName?mvhName:glName );		onInit();	}		public function setName( name : String ) : Void	{
		getLogger().error( this + ".setName(): " + name );
				var mvhl : MovieClipHelperLocator = MovieClipHelperLocator.getInstance( getOwner() );				if ( !( mvhl.isRegistered( name ) ) )		{			if ( mvhl.isRegistered( getName() ) ) mvhl.unregisterMovieClipHelper( getName() );			if ( mvhl.registerMovieClipHelper( name, this ) ) _sName = name;					} else		{			getLogger().error( this + ".setName() failed. '" + name + "' is already registered in MovieClipHelperLocator." );		}	}		private function _getBroadcaster() : EventBroadcaster	{		return _oEB;	}		private function _firePrivateEvent( e : IEvent ) : Void	{		getOwner().firePrivateEvent( e );	}}