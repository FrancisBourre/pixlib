/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.ioc.events.ApplicationBroadcaster;import com.bourre.ioc.log.PixiocDebug;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.events.ChannelExpert {	private static var _oI : ChannelExpert;	private static var _nKEY:Number = 0;		private var _m : Map;		/**	 * @return singleton instance of ChannelExpert	 */	public static function getInstance() : ChannelExpert 	{		if (!_oI) _oI = new ChannelExpert();		return _oI;	}		private function ChannelExpert()	{		_m = new Map();	}		public static function getKey( o ) : Number	{		if (o.__CHANNEL_KEY == null)		{			o.__CHANNEL_KEY = ChannelExpert.getNextKEY();			_global.ASSetPropFlags(o, ["__CHANNEL_KEY"], 7, 1);		}		return o.__CHANNEL_KEY;	}		public static function getNextKEY() : Number	{		return ChannelExpert._nKEY++;	}		public static function previewNextKey() : Number	{		return ChannelExpert._nKEY;	}		public function getChannel( o ) : String	{		var n : Number = ChannelExpert.getKey( o );		if ( _m.containsKey( n ) )		{			return _m.get( n );		} else		{			PixiocDebug.getInstance().debug( this + ".getChannel() failed on " + o );			registerChannel( n, ApplicationBroadcaster.NO_CHANNEL );			return undefined;		}	}		public function registerChannel( hashCode : Number, channel : String ) : String	{		return _m.put( hashCode, channel );	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}