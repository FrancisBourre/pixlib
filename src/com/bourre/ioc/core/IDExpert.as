/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.IndexedArray;import com.bourre.ioc.assembler.property.IPropertyExpertListener;import com.bourre.ioc.assembler.property.PropertyEvent;import com.bourre.ioc.log.PixiocDebug;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.core.IDExpert 	implements IPropertyExpertListener{	private static var _oI : IDExpert;		private var _o : Object;	private var _a : IndexedArray;		/**	 * @return singleton instance of IDExpert	 */	public static function getInstance() : IDExpert 	{		if (!_oI) _oI = new IDExpert();		return _oI;	}		private function IDExpert()	{		_o = new Object();		_a = new IndexedArray();	}		public function onBuildProperty( e : PropertyEvent ) : Void	{		var refID : String = e.getRefID();		if ( refID ) 		{			if ( refID.indexOf(".") != -1 )			{				var a : Array = refID.split(".");				refID = a[0];			}			_pushReference( refID, e.getOwnerID() );		}	}		private function _pushReference( refID : String, ownerID : String ) : Void	{		_a.push( refID );				var nRef : Number = _a.getIndex( refID );		var nOwner : Number = _a.getIndex( ownerID );				if ( nRef > nOwner )		{			_a.splice( nRef, 1 );			_a.splice( nOwner-1, 0, refID );		}	}		public function getReferenceList() : IndexedArray	{		return _a;	}		// check for id conflicts	public function register( id : String ) : Boolean	{		if (  _o[id] ) 		{			PixiocDebug.getInstance().fatal( this + ".register(" + id + ") failed. This id was already registered, check conflicts in your config file." );			return false;					} else		{			_o[id] = true;			_a.push( id );			return true;		}	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}