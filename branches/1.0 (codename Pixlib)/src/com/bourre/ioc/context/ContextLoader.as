/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.data.libs.AbstractLib;import com.bourre.data.libs.BasicXMLDeserializer;import com.bourre.data.libs.ILib;import com.bourre.data.libs.LibEvent;import com.bourre.data.libs.XMLToObject;import com.bourre.events.EventType;import com.bourre.ioc.context.Context;import com.bourre.ioc.context.ContextLoaderEvent;import com.bourre.ioc.parser.ContextParser;import com.bourre.log.PixlibDebug;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.context.ContextLoader 	extends AbstractLib{	private var _oContext : Context;		public static var onLoadInitEVENT:EventType = AbstractLib.onLoadInitEVENT;	public static var onLoadProgressEVENT:EventType = AbstractLib.onLoadProgressEVENT;	public static var onTimeOutEVENT:EventType = AbstractLib.onTimeOutEVENT;		public static var DEFAULT_URL : String = "applicationContext.xml";		public function ContextLoader( url : String, context : Context ) 	{		super();				url = url? url : ContextLoader.DEFAULT_URL;		_oContext = context ? context : new Context();				setContent( new XMLToObject(_oContext, new BasicXMLDeserializer() ) );		getContent().setURL( url );				if (getName() == undefined) setName( url );	}		public function getContext() : Context	{		return _oContext;	}		public function initEventSource() : Void	{		_e = new ContextLoaderEvent( null, this );	}		public function prefixURL( sURL : String ) : Void	{		ILib( getContent() ).prefixURL( sURL );	}		public function load() : Void	{		getContent().addListener( this );		getContent().load();	}		/*	 * ILibListener callbacks	 */	public function onLoadInit( e : LibEvent, parser : ContextParser ) : Void	{		PixlibDebug.DEBUG( "Application context has been parsed" );		fireEventType( ContextLoader.onLoadInitEVENT );	}		public function onLoadProgress( e : LibEvent ) : Void	{		fireEventType( ContextLoader.onLoadProgressEVENT );	}	public function onTimeOut( e : LibEvent ) : Void	{		fireEventType( ContextLoader.onTimeOutEVENT );	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}