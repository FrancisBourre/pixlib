/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.libs.GraphicLib;import com.bourre.data.libs.GraphicLibEvent;import com.bourre.data.libs.GraphicLibLocator;import com.bourre.ioc.assembler.channel.ChannelListenerExpert;import com.bourre.ioc.assembler.constructor.ConstructorExpert;import com.bourre.ioc.assembler.method.MethodExpert;import com.bourre.ioc.assembler.movieclip.MovieClipExpert;import com.bourre.ioc.assembler.property.PropertyExpert;import com.bourre.ioc.visual.LoaderUI;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.assembler.ApplicationAssembler {	private var _oLoaderUI : LoaderUI;		public function buildEmptyMovieClip( parentID : String, name : String, depth : Number ) : Void	{		MovieClipExpert.getInstance().buildEmptyMovieClip( name, parentID, depth );	}		public function buildGraphicLib( parentID : String, depth : Number, isVisible : Boolean, name : String, url : String ) : Void	{		MovieClipExpert.getInstance().buildGraphicLib( parentID, depth, isVisible, name, url );	}		public function buildGraphicProperty( id : String, propertyNode ) : Void	{		PropertyExpert.getInstance().buildProperty( id, propertyNode );	}		public function buildProperty( id : String, propertyNode ) : Void	{		PropertyExpert.getInstance().buildProperty( id, propertyNode );	}		public function buildObject( id : String, type : String, args, factory : String, singleton : String, channel : String ) : Void	{		ConstructorExpert.getInstance().buildConstructor( id, type, args, factory, singleton, channel );	}		public function buildMethodCall( id : String, methodCallNode : Object ) : Void	{		MethodExpert.getInstance().buildMethod( id, methodCallNode );	}		public function buildChannelListener( id : String, listenChannelNode : Object ) : Void	{		ChannelListenerExpert.getInstance().buildChannelListener( id, listenChannelNode );	}		public function buildDLL( url : String ) : Void	{		MovieClipExpert.getInstance().buildDLL( url );	}		public function createLoader( 	id : String, 									url : String, 									depth : Number, 									progressCallback : String, 									nameCallback : String, 									timeoutCallback : String,									builtCallback : String,									initCallback : String ) : GraphicLib	{		var gl : GraphicLib = new GraphicLib( _level0, (isNaN(depth))?9993:depth, false );		_oLoaderUI = new LoaderUI( progressCallback, nameCallback, timeoutCallback, builtCallback, initCallback );		gl.addEventListener( GraphicLib.onLoadInitEVENT, this, _onLoaderInit, id );		gl.setURL( url );		return gl;	}		private function _onLoaderInit( e : GraphicLibEvent, loaderID : String ) : Void	{		e.getLib().removeEventListener( GraphicLib.onLoadInitEVENT, this );				loaderID = loaderID?loaderID:LoaderUI.NAME;		GraphicLibLocator.getInstance().register( loaderID, e.getLib() );		_oLoaderUI.registerGraphicLib( loaderID );				e.getLib().show();	}		public function getLoaderUI() : LoaderUI	{		return _oLoaderUI;	}	/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}