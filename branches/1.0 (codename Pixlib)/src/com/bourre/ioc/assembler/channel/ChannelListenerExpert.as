/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.ioc.assembler.channel.ChannelListener;import com.bourre.ioc.assembler.channel.IChannelListenerExpertListener;import com.bourre.ioc.bean.BeanFactory;import com.bourre.ioc.events.ApplicationBroadcaster;import com.bourre.ioc.parser.ContextAttributeList;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.assembler.channel.ChannelListenerExpert 	extends ChannelListener{	private static var _oI : ChannelListenerExpert;		private var _oEB : EventBroadcaster;	private var _aChannelListener : Array;		/**	 * @return singleton instance of ChannelExpert	 */	public static function getInstance() : ChannelListenerExpert 	{		if (!_oI) _oI = new ChannelListenerExpert();		return _oI;	}		private function ChannelListenerExpert()	{		_oEB = new EventBroadcaster( this );		_aChannelListener = new Array();	}		public function assignAllChannelListeners() : Void	{		var l : Number = _aChannelListener.length;		for ( var i : Number = 0; i < l; i++ ) assignChannelListener( _aChannelListener[i] );	}		public function assignChannelListener( o : ChannelListener ) : Void	{		var listener = BeanFactory.getInstance().locate( o._sListenerID );		ApplicationBroadcaster.getInstance().addListener( listener, o._sChannel );	}		public function buildChannelListener( listenerID : String, channel ) : Void	{		if ( typeof(channel.attribute.channel) == "string" ) 		{			_aChannelListener.push( _buildChannelListener( listenerID, channel.attribute ) );								} else		{			var l : Number = channel.length;			for ( var i : Number = 0; i < l; i++ ) _aChannelListener.push( _buildChannelListener( listenerID, channel[i].attribute) );		}	}		private function _buildChannelListener( listenerID : String, rawInfo : Object ) : ChannelListener	{		return new ChannelListener( listenerID, ContextAttributeList.getChannel( rawInfo ) );	}		/**	 * Event system	 */	public function addListener( oL : IChannelListenerExpertListener ) : Void	{		_oEB.addListener( oL );	}		public function removeListener( oL : IChannelListenerExpertListener ) : Void	{		_oEB.removeListener( oL );	}		public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_oEB.addEventListener.apply( _oEB, arguments );	}		public function removeEventListener( e : EventType, oL ) : Void	{		_oEB.removeEventListener( e, oL );	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}