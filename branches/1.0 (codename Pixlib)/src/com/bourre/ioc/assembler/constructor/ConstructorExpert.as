/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Francis Bourre * @version 1.0 */import com.bourre.data.collections.Map;import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.ioc.assembler.constructor.Constructor;import com.bourre.ioc.assembler.constructor.ConstructorEvent;import com.bourre.ioc.assembler.constructor.IConstructorExpertListener;import com.bourre.ioc.assembler.property.PropertyExpert;import com.bourre.ioc.bean.BeanFactory;import com.bourre.ioc.build.BuildFactory;import com.bourre.ioc.core.IDExpert;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.assembler.constructor.ConstructorExpert 	extends Constructor {	private static var _oI : ConstructorExpert;		private var _oEB : EventBroadcaster;	private var _mConstructor : Map;		/**	 * @return singleton instance of ConstructorCallExpert	 */	public static function getInstance() : ConstructorExpert 	{		if (!_oI) _oI = new ConstructorExpert();		return _oI;	}		private function ConstructorExpert()	{		_oEB = new EventBroadcaster( this );		_mConstructor = new Map();	}		public function buildConstructor( 	id : String, 										type : String, 										args, 										factory : String, 										singleton : String,										channel : String ) : Constructor	{		var a : Array = PropertyExpert.getInstance().getPropertyVO( id, args );		var cons : Constructor = new Constructor( id, type, a, factory, singleton, channel );		_mConstructor.put( id, cons );		_oEB.broadcastEvent( new ConstructorEvent( cons ) );		return cons;	}		public function buildObject( o : Constructor )	{		var args : Array = PropertyExpert.getInstance().deserializeArguments( o._aArguments );		return BuildFactory.getInstance().getBuilder( o._sType ).build( o._sType, args, o._sFactory, o._sSingleton, o._sChannel );	}		public function buildAllObjects() : Void	{		var bf : BeanFactory = BeanFactory.getInstance();		var a : Array = IDExpert.getInstance().getReferenceList();		var l : Number = a.length;				for ( var i : Number = 0; i < l;i++ ) 		{			var id : String = a[i];			if ( _mConstructor.containsKey( id ) ) bf.register( id, buildObject( _mConstructor.get( id ) ) );		}	}		/**	 * Event system	 */	public function addListener( oL : IConstructorExpertListener ) : Void	{		_oEB.addListener( oL );	}		public function removeListener( oL : IConstructorExpertListener ) : Void	{		_oEB.removeListener( oL );	}		public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_oEB.addEventListener.apply( _oEB, arguments );	}		public function removeEventListener( e : EventType, oL ) : Void	{		_oEB.removeEventListener( e, oL );	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}