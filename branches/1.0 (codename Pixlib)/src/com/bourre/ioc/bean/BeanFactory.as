/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @author Francis Bourre * @version 1.0 */import com.bourre.core.ILocator;import com.bourre.data.collections.Map;import com.bourre.events.EventBroadcaster;import com.bourre.events.EventType;import com.bourre.ioc.bean.BeanEvent;import com.bourre.ioc.bean.IBeanFactoryListener;import com.bourre.log.PixlibDebug;import com.bourre.log.PixlibStringifier;class com.bourre.ioc.bean.BeanFactory 	implements ILocator{	private static var _oI : BeanFactory;		private var _oEB : EventBroadcaster;	private var _m : Map;		public static var onRegisterBeanEVENT : EventType = new EventType("onRegisterBean");	public static var onUnregisterBeanEVENT : EventType = new EventType("onUnregisterBean");		/**	 * @return singleton instance of BeanFactory	 */	public static function getInstance() : BeanFactory 	{		if (!_oI) _oI = new BeanFactory();		return _oI;	}		private function BeanFactory()	{		_oEB = new EventBroadcaster( this );		_m = new Map();	}		public function locate( key : String )	{		if ( isRegistered( key ) )		{			return _m.get( key );					} else		{			PixlibDebug.ERROR( this + ".locate(" + key + ") fails." );		}	}		public function isRegistered( key : String ) : Boolean	{		return _m.containsKey( key );	}		public function isBeanRegistered( bean ) : Boolean	{		return _m.containsValue( bean );	}		public function register( key : String, bean ) : Boolean	{		if ( !(isRegistered( key )) && !(isBeanRegistered( bean )) )		{			_m.put( key, bean );			_oEB.broadcastEvent( new BeanEvent( BeanFactory.onRegisterBeanEVENT, key, bean ) );			return true;					} else		{			if ( isRegistered( key ) )			{				PixlibDebug.ERROR( this + ".register(" + key + ", " + bean + ") fails, key is already registered." );			}						if ( isBeanRegistered( bean ) )			{				PixlibDebug.ERROR( this + ".register(" + key + ", " + bean + ") fails, bean is already registered." );			}						return false;		}	}		public function unregister( key : String ) : Boolean	{		if ( isRegistered( key ) )		{			_m.remove( key );			_oEB.broadcastEvent( new BeanEvent( BeanFactory.onUnregisterBeanEVENT, key, null ) );			return true;					} else		{			return false;		}	}		public function addListener( oL : IBeanFactoryListener ) : Void	{		_oEB.addListener( oL );	}		public function removeListener( oL : IBeanFactoryListener ) : Void	{		_oEB.removeListener( oL );	}		public function addEventListener( e : EventType, oL, f : Function ) : Void	{		_oEB.addEventListener.apply( _oEB, arguments );	}		public function removeEventListener( e : EventType, oL ) : Void	{		_oEB.removeEventListener( e, oL );	}		/**	 * Returns the string representation of this instance.	 * @return the string representation of this instance	 */	public function toString() : String 	{		return PixlibStringifier.stringify( this );	}}