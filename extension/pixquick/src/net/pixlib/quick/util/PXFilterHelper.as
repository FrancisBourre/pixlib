/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
package net.pixlib.quick.util{	import flash.display.DisplayObject;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.ColorMatrixFilter;	import flash.filters.DropShadowFilter;	/**	 * Manages Flash filter on DisplayObject.	 * 	 * @langversion 3.0	 * @playerversion Flash 10	 * 	 * 	 * @author Romain Ecarnot	 */	final public class PXFilterHelper	{		//--------------------------------------------------------------------		// Constants		//--------------------------------------------------------------------				/**		 * A default DropShadowFilter instance.		 * 		 * <ul>		 *   <li>length : 0</li>		 *   <li>direction : 45</li>		 *   <li>alpha : 0.9</li>		 *   <li>blurX : 10</li>		 *   <li>blurY : 10</li>		 *   <li>strength : 0.5</li>		 *   <li>quality : flash.filters.BitmapFilterQuality#HIGH</li>		 * </ul>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static const SOFT_SHADOW_FILTER : DropShadowFilter = new DropShadowFilter(0, 45, 0x000000, 0.9, 10, 10, 0.50, BitmapFilterQuality.HIGH);		/**		 * A default greyscale ColorMatrixFilter.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static const GREY_FILTER : ColorMatrixFilter = _initGreyScale();				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Adds passed-in filter to passed-in <code>target</code> DisplayObject.		 * 		 * @param target DisplayObject target		 * @param filter BitmapFilter filter		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function addFilter(target : DisplayObject, filter : BitmapFilter) : void		{			if( target == null || filter == null ) return;						var tmp : Array = target.filters;			tmp.push(filter);			target.filters = tmp;		}		/**		 * Removes passed-in filter from passed-in DisplayObject.		 * 		 * @param target DisplayObject target		 * @param filter BitmapFilter filter		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function removeFilter( target : DisplayObject, filter : BitmapFilter = null ) : void		{			if( target == null || filter == null ) return;						var tmp : Array = target.filters;			var index : int = getFilterIndex(target, filter);			if(index > -1)			{				tmp.splice(index, 1);                				target.filters = tmp;			}		}		/**		 * Returns filter index ( Filter Array position ).<br />		 * The search is made on filter instance.		 * 		 * <p>Returns -1 if passed-in filter is not applied on 		 * passed-in <code>target</code> DisplayObject.</p>		 * 		 * @param target DisplayObject target		 * @param filterType Filter type class to search in passed-in 		 * <code>target</code> DisplayObject		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function getFilterIndex(target : DisplayObject, filter : BitmapFilter) : int		{			if (target == null) return -1;	        			var pos : int = target.filters.length;			while( pos-- )			{				var f : BitmapFilter = target.filters[pos];				if( f == filter ) return pos;			}			return -1;		}		/**		 * Returns filter applied on <code>target</code> at passed-in index.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function getFilterAt(target : DisplayObject, index : uint) : BitmapFilter		{			if(target)			{				if(index < target.filters.length) return target.filters[index];			}	        			return null;		}		/**		 * Returns indexes list of passed-in Filter type applied on 		 * <code>target</code> DisplayObject. 		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function getFilterTypeIndexes(target : DisplayObject, filterType : Class) : Array		{			var list : Array = [];						if (target == null || filterType == null || target.filters.length == 0) return list;						var len : uint = target.filters.length;			for(var i : uint = 0;i < len;i++) if(target.filters[i] is filterType) list.push(i);						return list;		}		/**		 * Removes all filters typed as <code>filterType</code> parameter 		 * from passed-in DisplayObject.		 * 		 * @param target DisplayObject target		 * @param filterType Filter type class to remove		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function clearFilterType(target : DisplayObject, filterType : Class) : void		{			if( target == null || filterType == null ) return;						var len : int = target.filters.length;			var tmp : Array = new Array();						for( var i : int = 0;i < len ;i++ )			{				var f : BitmapFilter = target.filters[i];				if( !( f is filterType ) ) tmp.push(f);			}			target.filters = tmp;		}		/**		 * Removes all filters from passed-in DisplayObject.		 * 		 * @param target DisplayObject target		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		public static function clear( target : DisplayObject ) : void		{			target.filters = new Array();		}						//--------------------------------------------------------------------		// Private implementations		//--------------------------------------------------------------------				/** @private */		function PXFilterHelper()		{		}		/**		 * @private		 */		private static function _initGreyScale() : ColorMatrixFilter		{			var rwgt : Number = .3086;			var gwgt : Number = .6094;			var bwgt : Number = .0820;	 					var lumTransform : ColorMatrixFilter = new ColorMatrixFilter(new Array(rwgt, gwgt, bwgt, 0.0, 0.0, rwgt, gwgt, bwgt, 0.0, 0.0, rwgt, gwgt, bwgt, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0));			return lumTransform;		}	}}