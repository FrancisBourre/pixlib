/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.quick.command.config{	import net.pixlib.commands.PXAbstractCommand;	import net.pixlib.exceptions.PXUnimplementedMethodException;	import net.pixlib.load.PXLoader;	import net.pixlib.load.PXLoaderEvent;	import net.pixlib.load.PXResourceLocator;	import net.pixlib.quick.document.resource.PXDocumentResource;	import net.pixlib.quick.util.PXRequestHelper;	import flash.events.Event;	/**	 * The PXAbstractResourceLoader class is an abstract implementation for 	 * a resource loading process.	 *	 * @langversion 3.0	 * @playerversion Flash 10	 *	 * @author Romain Ecarnot	 	 */	public class PXAbstractResourceLoader extends PXAbstractCommand	{		// --------------------------------------------------------------------		// Protected methods		// --------------------------------------------------------------------		/**		 * @private		 */		private var _resource : PXDocumentResource;		// --------------------------------------------------------------------		// Protected properties		// --------------------------------------------------------------------		/**		 * PXDocumentResource to use as loading source.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		final protected function get resource() : PXDocumentResource		{			return _resource;		}		/**		 * Returns dedicated loader instance for loading process.		 * 		 * @return dedicated loader instance for loading process.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function get loader() : PXLoader		{			throw new PXUnimplementedMethodException("getLoader() must be implemented !", this);		}		/**		 * PXRequestHelper used for loading process.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function get request() : PXRequestHelper		{			throw new PXUnimplementedMethodException("getRequest() must be implemented !", this);		}		// --------------------------------------------------------------------		// Protected methods		// --------------------------------------------------------------------		/**		 * Executes command, starts loading process.		 * 		 * @param event	Event flow not used in abstract implementation		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		final override protected function onExecute(event : Event = null) : void		{			var currentLoader : PXLoader = loader;			currentLoader.anticache = request.anticache;			currentLoader.addEventListener(PXLoaderEvent.onLoadInitEVENT, onLoadInitHandler);			currentLoader.addEventListener(PXLoaderEvent.onLoadTimeOutEVENT, onLoadErrorHandler);			currentLoader.addEventListener(PXLoaderEvent.onLoadErrorEVENT, onLoadErrorHandler);			currentLoader.load(request.url, request.context);		}		/**		 * Triggered when data are loaded.		 * 		 * @param event	Loader event flow		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function onLoadInitHandler(event : PXLoaderEvent) : void		{			complete(event.loader);		}		/**		 * Triggered when an error occured during file loading process.		 * 		 * @param event	Loader event flow		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function onLoadErrorHandler(event : PXLoaderEvent) : void		{			logger.error("Loading failed!" + event.errorMessage, this);			complete(event.loader);		}				/**		 * Triggered when loading process is ended.		 * 		 * @param loader Loader instance to release		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function complete(targetLoader : PXLoader) : void		{			targetLoader.removeEventListener(PXLoaderEvent.onLoadInitEVENT, onLoadInitHandler);			targetLoader.removeEventListener(PXLoaderEvent.onLoadTimeOutEVENT, onLoadErrorHandler);			targetLoader.removeEventListener(PXLoaderEvent.onLoadErrorEVENT, onLoadErrorHandler);			if(resource.id)			{				PXResourceLocator.getInstance().register(resource.id, targetLoader.content);			}						fireCommandEndEvent();		}		// --------------------------------------------------------------------		// Private methods		// --------------------------------------------------------------------		/**		 * @private		 */		function PXAbstractResourceLoader(resource : PXDocumentResource)		{			_resource = resource;		}	}}